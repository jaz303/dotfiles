# Interactive shells (3)

# General notes
# https://unix.stackexchange.com/questions/71253/what-should-shouldnt-go-in-zshenv-zshrc-zlogin-zprofile-zlogout
# https://scriptingosx.com/2019/06/moving-to-zsh/

# Prompt customisation
# https://github.com/zsh-users/zsh/blob/master/Misc/vcs_info-examples
# http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html
# https://arjanvandergaag.nl/blog/customize-zsh-prompt-with-vcs-info.html
# https://github.com/sindresorhus/pure
# https://github.com/denysdovhan/spaceship-prompt
# http://stevelosh.com/blog/2010/02/my-extravagant-zsh-prompt/
# https://gist.github.com/mislav/1712320

export CLICOLOR=1

################################################################################
# completion                                                                   #
################################################################################

autoload -U compinit
compinit

################################################################################
# prompt                                                                       #
################################################################################

autoload -U colors
colors     
setopt prompt_subst

# Modify the colors and symbols in these variables as desired.
GIT_PROMPT_PREFIX="%{$fg_bold[magenta]%}["
GIT_PROMPT_SUFFIX="]%{$reset_color%}"
GIT_PROMPT_MERGING="%{$fg_bold[magenta]%}⚡"
GIT_PROMPT_UNTRACKED="%{$fg_bold[red]%}●"
GIT_PROMPT_MODIFIED="%{$fg_bold[cyan]%}●"
GIT_PROMPT_STAGED="%{$fg_bold[green]%}●"

# Show Git branch/tag, or name-rev if on detached head
parse_git_branch() {
  (git symbolic-ref -q HEAD || git name-rev --name-only --no-undefined --always HEAD) 2> /dev/null
}

# Show different symbols as appropriate for various Git repository states
parse_git_state() {

  local GIT_STATE=""

  local GIT_DIR="$(git rev-parse --git-dir 2> /dev/null)"
  if [ -n $GIT_DIR ] && test -r $GIT_DIR/MERGE_HEAD; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_MERGING
  fi

  if [[ -n $(git ls-files --other --exclude-standard 2> /dev/null) ]]; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_UNTRACKED
  fi

  if ! git diff --quiet 2> /dev/null; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_MODIFIED
  fi

  if ! git diff --cached --quiet 2> /dev/null; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_STAGED
  fi

  if [[ -n $GIT_STATE ]]; then
    echo "$GIT_STATE "
  fi

}

# If inside a Git repository, print its branch and state
git_prompt_string() {
  local git_where="$(parse_git_branch)"
  [ -n "$git_where" ] && echo "$(parse_git_state)$GIT_PROMPT_PREFIX${git_where#(refs/heads/|tags/)}$GIT_PROMPT_SUFFIX "
}

PS1='%B%(?.%F{green}-.%K{red}%F{black}%?)%f%k%b %B%(!.%F{red}.%F{green})%n@%m%f%b %B%F{blue}%1~%f%b %# '
#PS1="%(?,%{$fg_bold[green]%}-,%{$fg_bold[red]%}!)%{$reset_color%} %{$fg_bold[green]%}%n@%m %{$fg_bold[blue]%}%1~ %#%{$reset_color%} "
RPS1='$(git_prompt_string)%{$fg_bold[yellow]%}#%h%{$reset_color%}'

################################################################################
# platform                                                                     #
################################################################################

platform='unknown'
uname=`uname`
if [[ "$uname" == "Darwin" ]]; then
  platform="mac"
  source ~/.dotfiles/etc/zshrc_mac
elif [[ "$uname" == "Linux" ]]; then
  platform="linux"
  source ~/.dotfiles/etc/zshrc_linux
fi

################################################################################
# simple aliases + functions                                                   #
################################################################################

alias ls='ls $LS_OPTIONS'
alias ll='ls $LS_OPTIONS -lh'
alias lll='ls $LS_OPTIONS -lah'
alias grep='grep --color=auto'

alias h="fc -l"
alias hf="fc -lm"

alias p="ps ${PS_ARGS}"
function pf {
    ps $PS_ARGS | grep -i $* | grep -v grep
}

function tabs_to_spaces {
  for f in $(find $1 -name "*.$2")
  do
    expand -t 4 "${f}" > "${f}.spaces"
    mv "${f}.spaces" "${f}"
  done
}

# Generate a password
function pw() {
  if [[ ! -n "$1" ]]
  then
    length=32
  else
    length=$1
  fi
  pwgen $length 1
}

################################################################################
# toolchain imports                                                            #
################################################################################

function avrify() {
    export PATH="/Applications/Arduino.app/Contents/Java/hardware/tools/avr/bin:$PATH"
}

function armify() {
    export PATH="/opt/toolchains/gcc-arm-none-eabi/bin:$PATH"
}

################################################################################
# node shortcuts                                                               #
################################################################################

alias gyp="node-gyp rebuild"
alias boom="git push origin master --tags && npm publish"

